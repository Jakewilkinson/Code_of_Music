import controlP5.*;

import beads.*;
import org.jaudiolibs.beads.*;

int bpm;
int beatsPerMeasure;
float beatLength;
int currentBeat;
int currentMeasure;
float hfim;
int x, y, w, h;

PFont f;

ControlP5 cp5;
Knob knobone;
Clock clock;
AudioContext ac;

void setup(){
  
  cp5 = new ControlP5(this);
  knobone = cp5.addKnob("BPM")
                .setRange(50, 200)
                .setValue(50)
                .setPosition(275, 10)
                .setRadius(60)
                .setDragDirection(Knob.VERTICAL)
                ;
   
  ac = new AudioContext();
  bpm = 120;
  
  beatsPerMeasure = 12;
  
  beatLength = 60000.0/bpm;
  clock = new Clock(ac, beatLength);
  clock.setClick(true); 
  clock.addMessageListener(
    new Bead(){
      public void messageReceived(Bead message){
        Clock c = (Clock)message;
        onClock(c);
      }
    }
  );
  ac.out.addDependent(clock);
  ac.start();
  
  size(1100, 700);
  f = createFont("Helvetica", 14);
  textAlign(TOP, LEFT);
  textFont(f);
  w = width - 100;
}

void draw() {
 background(44);
 

 
  
 float beatWidth = w/(float)beatsPerMeasure;
 
 for(int i = 0; i < beatsPerMeasure; i++) {
   for(int j = 0; j < 4; j++) {
     
   stroke(0);
   fill(20, 66, 122);
   polygon(90 + i * 80, 200 + j*105, 60, 6);
   
   if(i == currentBeat){
     stroke(0);
     strokeWeight(3);
     fill(200, 66, 1);
     polygon(90 + i * 80, 200 + j*105, 60, 6);
     
    
 }
   }
}

fill(140);
rect(40, 30, 200, 100);
}

void onClock(Clock c){
  currentBeat = c.getBeatCount() % beatsPerMeasure;
  currentMeasure = c.getBeatCount() / beatsPerMeasure;
  
  //calculate how many ticks are in a measure
  float ticksPerMeasure = beatsPerMeasure * c.getTicksPerBeat();
  //get a number between 0 and 1 to tell us how far we are
  hfim = (c.getCount()%ticksPerMeasure)/ticksPerMeasure;
  
  
  
}

void polygon(float x, float y, float radius, int npoints) {
  float angle = TWO_PI / npoints;
  beginShape();
  for (float a = 0; a < TWO_PI; a += angle) {
    float sx = x + cos(a) * radius;
    float sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
  
}
